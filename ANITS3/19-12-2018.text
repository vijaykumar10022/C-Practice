19-12-2018:
------------

exit();


printf("%d",d);
return 0;
Hardware component number of library files
program exicted with code 0;


compile - f8
build -f9
execute - f5

Linux:
	gcc filename.c 
	a.out
	
	gcc filename.c -o sa
	sa
	 
Windows:
	gcc filename.c
	a.exe
	
	gcc filename.c -o sa
	sa.exe

Structure of C:
===============
1.Comments:	
		1.single line //
		2.Multi Line /* */

2.Header file
		stdio.h main(),printf(),scanf()
		//conio.h getch(),clrscr()
		math.h pow(),sqrt(),
		string.h strlen(),strcpy()
		stdlib.h
	Own header file creation:
	
	.c .h
	sample.c
	#include<stdio.h> preprocessor directives
	#include "apssdc.h"
	
	
	# macros
	
	apssdc.h
	 int a=20;	
3.Global declarations

	#define MAX 100
	
	Constant variables

4.Function prototype:

5.Main Fucntion:
	
	variable declarations,statements,expressions, etyc.,

6. Return:


Variables:
----------
	-stores the value amnd changes the value
	
	-local
	-global
	-static changes the values in functions 
	-extern extern int a;

for(init;condi;incr/decr)
{
	//stmnts;
}	

1->init
2->cond;
3->stmnt;
4->incr/decr
5->cond;
6->stmnt;
7->incr/decr
8->


for(i=0;i<n;i++)
{
	printf("%d ",i);
}
printf("%d ",i);


20-12-2018:
-----------


Inner Loops(nested loops):
=========================
	
	Loop within a loop 
	
	n 
	m 
	
	for(i=1;i<=n;i++)
	{	
		for(j=1;j<=n;j++)
		{
			
		}
		printf("\n");
	}
	
	Arrays:
	-------
	
		int n;
		scanf("%d",&n);
		int ar[n];
		printf("%p",&arr[i]);
		
		Address of Array : 100
		
		arr[0]=1;
		for(i=1;i<=n;i++)
		{
			for(j=i+1;j<=n;j++)
			{
				if(arr[i]==arr[j])
				{
					printf("%d",i);
				}
			}
		}
		arr[0]= 100
		arr[1]= 104
		arr[2]= 108
		
		int n;
		scanf("%d",&n);
		int arr[n][n];
		

Single dimensional array:

Input: n

	Reading and printing of elements
	
Output:
		Sum of array elements 

Example: 
	Input:5 
	Read elements:1 4 5 3 2
	Output: Sum of array elements are:15
	
Pointers:
========
	
	 stores the address of another variable of same type
	 
	 int a;
	 a=100;
	 int *p;
	 p=&a;		pointer p= address of a;
	 p=500
	 
	 a
	 *p
	 
	 call by value:
	 
	 read(a,n)
	 int read(int a[],int n)
	 {
	 }
	 
	 call by reference
	 
	 read(&a,&n);
	 int swap(int *n,int *m)
	 {
	 }

Pointer to pointer(Double pointer):
==================================

	
	
	
	
Structures:
===========

	struct structurename structure_variable
	{
		data_type Members;
		
	}
	
	struct emp 
	{
		int id;
		char name[20];
		double sal;
		struct emp_addr ed; 
	}e;
	
	struct emp_addr 
	{
		int drno;
		char street[20];
	}
	
	int main()
	{
		int n;
		scanf("%d",&n);
		struct emp e[n];
		for
			scanf("%d%s%lf",&e[i].id,e[i].name,&e[i].sal);
		for	
			printf("%d%s%lf",e[i].id,e[i].name,e[i].sal);
		return 0; 
	}
	
	typedef struct emp
	{
		int id;
		char sname[100]; 
	}ed a;
	
	int main()
	{
		a;	
	}
	
	
	  			
	 		
	
	
	
	
	
	
	








