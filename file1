Open file:
==========
FILE *fopen(const char *filename,const char*mode);

it creates a new file or to open an existing file returns the pointer to the same the returned pointer can be used for writing to the file or reading from the file

Following are the access mode used for text file:
================================================
r ---> Open an existing text file for reading pupose 
w---->open a text file for writing if it does not exits than a new file is created .here your program will start writing content from the begining of the file
a---->open a text file for writing in appending mode,if it does not exit than a new file is created here your program will start appending content in the existing file content
r+---->open a text file for reading and writing both 
w+---->open a text file for reading and both . it first truncate the file to zero length if it exists otherwise create file if it does not exit

 Close a file:
 =============
 int fclose(FILE *fp);
 the fclose() function return zero on sucess, or EOF if there is an error in an error on closing the file 
 this function actually flush any data still pending in the buffer to the file , close the file ,and release anu 


Wring and reading in text format:
================================
writing to a Text file:
----------------------
to write individual character to a stream 
int fputc(int c,FILE *fp);---->it returns the written character written on success otherwise EOF if there is an error

TO Write a null-terminated String to a stream:
int fputs(cons char *s,FILE *fp);
int fprintf(FILE *fp,const char *format,...)
Both return a non-negatve values on success,otherwise EOF is returned in case of anu error

Reading from a text file:
--------------------------
to read a single character from a file
int fgetc(FILE *fp);
the return value is the charater read or in case of anu error it return EOF

TO Read a string from
--------------------
char *fgets(char *buf,int n, FILE *fp);
the function fgets() read up to n-1 charater from the stream referenced by fp,it copies the read string into the buffer buf, appending a null character to terminate the string

note :you can also use int fscanf(FILE *fp,const char *format,...)function to read string from a file file but it stops

Following are the metods used for reding and wring in binary format:
------------------------------------------------------------------
size_t fread(void *data,size_of_element,size_t number_of_elements,FILE *a_file);
size_t fwrite(const void *data,size_of_element,size_t number_of_elements,FILE *a_file);

fseek(FILE *a_file,size_t offset,size_t position);
 Allows moving file-pointer forward/backword
 



